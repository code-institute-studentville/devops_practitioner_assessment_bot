name: poc_assessor_checks_ci
# heroku authorizations:create
on:
  pull_request:
    types: [opened,reopened]
  push:

env:
  STUDENT_CODEBASE: marys_ci_cd_pipeline.yml
  RULES_ENGINE: iot-code-institute2/rules_engline
jobs:
  teacher_assessment_time:
    # if: ${{ github.ref == 'refs/heads/main' }}
    name: JOB - Devops Practitioner Assessment Bot
    runs-on: ubuntu-latest

#
#
# Start compiling report
#
#
    steps:
    - name: checkout me code
      uses: actions/checkout@v2


    - name: report header
      run: |
        echo "**** Automated Students Grades Card *****" > grades.md
        echo "Submission Date: $(date) " >> grades.md

    - name: student identifiers
      run: |
          grep STUDENT_EMAIL ${{env.STUDENT_CODEBASE}} >> grades.md
          grep STUDENT_NAME ${{env.STUDENT_CODEBASE}} >> grades.md

    - name: checkout assessment rules
      uses: actions/checkout@v2
      with:
        repository: iot-code-institute2/rules_engline
        path: rules

    - name: execute assessment rules engine
      env:
        CHECK_RT: ""
      run: |
        echo -e "\nINF: Path $(pwd)"
        ls -lrta
        echo -e "\nINF: Rules Listing"
        cat rules/rules-pr.csv

        echo -e "\nINF: Check rules..."
        grep --version
        echo -e "\n"

        IFS=","
        while read comment check grade expected_result
        do
          echo "Comment ($comment)"
          echo "Check1 ($check)"
          echo "Check2 (${{env.CHECK_RT}})"
          echo "CHECK_RT=$check" >> $GITHUB_ENV
          echo "Check3 (${{env.CHECK_RT}})"
          echo "Grade ($grade)"
          echo "Codebase under inspection (${{env.STUDENT_CODEBASE}})"

          grep "${{env.CHECK_RT}}" ${{env.STUDENT_CODEBASE}} && echo "$? $comment : PASSED($grade)" >> grades.md || echo "$? $comment : FAILED($grade)" >> grades.md
          # grep "pip" marys_ci_cd_pipeline.yml && echo "$? $comment : PASSED($grade)" >> grades.md || echo "$? $comment : FAILED($grade)" >> grades.md

        done < rules/rules-pr.csv

        echo -e "\nINF: Grades Results"
        cat grades.md

    - name: archive student results
      uses: actions/upload-artifact@v2
      with:
        name: students_assessment
        path: ./grades.md
        retention-days: 5

    - name: clean up
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        rm ${{env.STUDENT_CODEBASE}}
        git config --global user.email "tonyennis@yahoo.com"
        git config --global user.name "Anthony Ennis"
        git add .
        cat grades.md | git commit -F -
        rm grades.md

  comms_slack:
    needs: teacher_assessment_time
    name: JOB - Slack Update
    runs-on: ubuntu-latest
    steps:
    - name: notify-team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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  # required
      if: always() # Pick up events even if the job fails or is canceled.
